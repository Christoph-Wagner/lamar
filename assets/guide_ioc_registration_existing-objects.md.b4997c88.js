import{_ as n,c as s,o as a,a as t}from"./app.35d600bb.js";const h='{"title":"Registering Existing Objects","description":"","frontmatter":{},"relativePath":"guide/ioc/registration/existing-objects.md","lastUpdated":1644423598335}',e={},o=t(`<h1 id="registering-existing-objects" tabindex="-1">Registering Existing Objects <a class="header-anchor" href="#registering-existing-objects" aria-hidden="true">#</a></h1><p>It&#39;s frequently common to register existing objects with a Lamar <code>Container</code> and there are overloads of the <code>ServiceRegistry.For().Use(object)</code> and <code>ServiceRegistry.For().Add(object)</code> methods to do just that:</p><p><a id="snippet-sample_injecting-pre-built-object"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">should_be_able_to_resolve_from_the_generic_family_expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> widget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IWidget</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;mine&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;mine&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ShouldBeTheSameAs</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Bugs/AddValueDirectlyWithGenericUsage.cs#L8-L18" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_injecting-pre-built-object" title="Start of snippet">anchor</a></sup></p><p>Injecting an existing object into the <code>Container</code> makes it a de facto singleton, but the <code>Container</code> treats it with a special scope called <code>ObjectLifecycle</code> if you happen to look into the <a href="/guide/ioc/diagnostics/what-do-i-have.html">WhatDoIHave()</a> diagnostics.</p><p>Lamar will attempt to call the <code>IDisposable.Dispose()</code> on any objects that are directly injected into a <code>Container</code> that implement <code>IDisposable</code> when the <code>Container</code> itself is disposed.</p>`,7),p=[o];function c(i,l,r,u,d,k){return a(),s("div",null,p)}var _=n(e,[["render",c]]);export{h as __pageData,_ as default};
