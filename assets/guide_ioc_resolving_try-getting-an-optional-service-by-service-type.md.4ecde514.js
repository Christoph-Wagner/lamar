import{_ as n,c as s,o as a,a as t}from"./app.35d600bb.js";const h='{"title":"Try Getting an Optional Service by Service Type","description":"","frontmatter":{},"headers":[{"level":2,"title":"Concrete Types","slug":"concrete-types"},{"level":2,"title":"Optional Generic Types","slug":"optional-generic-types"}],"relativePath":"guide/ioc/resolving/try-getting-an-optional-service-by-service-type.md","lastUpdated":1644423598339}',e={},p=t(`<h1 id="try-getting-an-optional-service-by-service-type" tabindex="-1">Try Getting an Optional Service by Service Type <a class="header-anchor" href="#try-getting-an-optional-service-by-service-type" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>The Lamar team does not recommend using &quot;optional&quot; dependencies as shown in this topic, but external frameworks like <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> MVC and Web API use this concept in their IoC container integration, so here it is. The Lamar team prefers the usage of the <a href="http://en.wikipedia.org/wiki/Null_Object_pattern" target="_blank" rel="noopener noreferrer">Nullo pattern</a> instead.</p></div><p>In normal usage, if you ask Lamar for a service and Lamar doesn&#39;t recognize the requested type, the requested name, or know what the default should be for that type, Lamar will fail fast by throwing an exception rather than returning a null. Sometimes though, you may want to retrieve an <em>optional</em> service from Lamar that may or may not be registered in the Container. If that particular registration doesn&#39;t exist, you just want a null value. Lamar provides first class support for <em>optional</em> dependencies through the usage of the <code>IContainer.TryGetInstance()</code> methods.</p><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>In Lamar, the <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core <code>IServiceProvider.GetService()</code> method has the same functionality and meaning as the <code>TryGetInstance()</code> method. If you were wondering how Lamar&#39;s StructureMap-flavored <code>GetInstance()</code> method is different, that&#39;s how.</p></div><p>Say you have a simple interface <code>IFoo</code> that may or may not be registered in the Container:</p><p><a id="snippet-sample_optional-foo"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFoo</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IFoo</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/Resolving/OptionalDependencies.cs#L8-L17" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_optional-foo" title="Start of snippet">anchor</a></sup></p><p>In your own code you might request the <code>IFoo</code> service like the code below, knowing that you&#39;ll take responsibility yourself for building the <code>IFoo</code> service if Lamar doesn&#39;t have a registration for <code>IFoo</code>:</p><p><a id="snippet-sample_optional-real-usage"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFoo</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IFoo</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">real_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// if the container doesn&#39;t know about it,</span>
    <span class="token comment">// I&#39;ll build it myself</span>
    <span class="token class-name"><span class="token keyword">var</span></span> foo <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryGetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFoo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token operator">??</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/Resolving/OptionalDependencies.cs#L95-L112" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_optional-real-usage" title="Start of snippet">anchor</a></sup></p><p>Just to make this perfectly clear, if Lamar has a default registration for <code>IFoo</code>, you get this behavior:</p><p><a id="snippet-sample_optional-got-it"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">i_have_got_that</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span> _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFoo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Foo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryGetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFoo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ShouldNotBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// -- or --</span>

    container<span class="token punctuation">.</span><span class="token function">TryGetInstance</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IFoo</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ShouldNotBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/Resolving/OptionalDependencies.cs#L19-L34" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_optional-got-it" title="Start of snippet">anchor</a></sup></p><p>If Lamar knows nothing about <code>IFoo</code>, you get a null:</p><p><a id="snippet-sample_optional-dont-got-it"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">i_do_not_have_that</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryGetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFoo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ShouldBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// -- or --</span>

    container<span class="token punctuation">.</span><span class="token function">TryGetInstance</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IFoo</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ShouldBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/Resolving/OptionalDependencies.cs#L36-L51" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_optional-dont-got-it" title="Start of snippet">anchor</a></sup></p><h2 id="concrete-types" tabindex="-1">Concrete Types <a class="header-anchor" href="#concrete-types" aria-hidden="true">#</a></h2><p>Since it&#39;s not a perfect world, there are some gotchas you need to be aware of. While Lamar will happily <em>auto-resolve</em> concrete types that aren&#39;t registered, that does not apply to the <code>TryGetInstance</code> mechanism:</p><p><a id="snippet-sample_optional-no-concrete"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteThing</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">no_auto_resolution_of_concrete_types</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryGetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConcreteThing<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ShouldBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// now register ConcreteThing and do it again</span>
    container<span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConcreteThing<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConcreteThing<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryGetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConcreteThing<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ShouldNotBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/Resolving/OptionalDependencies.cs#L53-L73" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_optional-no-concrete" title="Start of snippet">anchor</a></sup></p><h2 id="optional-generic-types" tabindex="-1">Optional Generic Types <a class="header-anchor" href="#optional-generic-types" aria-hidden="true">#</a></h2><p>If you are using open generic types, the <code>TryGetInstance()</code> mechanism <strong>can</strong> close the open generic registration to satisfy the optional dependency like this sample:</p><p><a id="snippet-sample_optional-close-generics"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IThing<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thing<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IThing<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">can_try_get_open_type_resolution</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> _<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IThing<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Thing<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryGetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IThing<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Thing<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/Resolving/OptionalDependencies.cs#L75-L93" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_optional-close-generics" title="Start of snippet">anchor</a></sup></p>`,30),o=[p];function c(l,i,u,r,k,d){return a(),s("div",null,o)}var g=n(e,[["render",c]]);export{h as __pageData,g as default};
