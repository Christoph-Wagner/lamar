import{_ as n,c as a,o as s,a as t}from"./app.35d600bb.js";const h='{"title":"Injected Fields","description":"","frontmatter":{},"relativePath":"guide/compilation/frames/injected-fields.md","lastUpdated":1644423598327}',e={},p=t(`<h1 id="injected-fields" tabindex="-1">Injected Fields <a class="header-anchor" href="#injected-fields" aria-hidden="true">#</a></h1><p>There&#39;s a special kind of <a href="/guide/compilation/frames/variables.html">Variable</a> called <code>InjectedField</code> that can be used to:</p><ul><li>Declare a private field within a generated type</li><li>Establish a <code>Variable</code> that points to that private field</li><li>Set up a constructor parameter for that field</li><li>In the constructor, map the constructor parameter to the private field</li></ul><p>As an example, let&#39;s take the <code>WhatTimeIsIt</code> generated type from the <a href="/guide/compilation/frames/">frames model tutorial</a>, but this time generate the class with the assumption that the &quot;now&quot; time is injected into the generated type&#39;s constructor like this:</p><p><a id="snippet-sample_using-injected-field"></a></p><div class="language-cs"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> assembly <span class="token operator">=</span> GeneratedAssembly<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">AddType</span><span class="token punctuation">(</span><span class="token string">&quot;WhatTimeIsIt&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ISaySomething</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> method <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">MethodFor</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>ISaySomething<span class="token punctuation">.</span>Speak<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> @call <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MethodCall</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">NowSpeaker</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>NowSpeaker<span class="token punctuation">.</span>Speak<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create an InjectedField as the argument to</span>
<span class="token comment">// the Speak method</span>
<span class="token class-name"><span class="token keyword">var</span></span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InjectedField</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DateTime</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;now&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
@call<span class="token punctuation">.</span>Arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">;</span>

method<span class="token punctuation">.</span>Frames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>@call<span class="token punctuation">)</span><span class="token punctuation">;</span>

assembly<span class="token punctuation">.</span><span class="token function">CompileAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/LamarCompiler.Testing/Samples/InjectedFieldUsage.cs#L22-L38" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-injected-field" title="Start of snippet">anchor</a></sup></p><p>At runtime as Lamar tries to write the code for a new generated type, it will seek out any or all <code>InjectedField</code> variables used within any of the methods and use those to generate a constructor function. The generated code for the dynamic type built up above will end up looking like this:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhatTimeIsIt</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Lamar<span class="token punctuation">.</span>Testing<span class="token punctuation">.</span>Samples<span class="token punctuation">.</span>ISaySomething</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">DateTime</span> _now<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">WhatTimeIsIt</span><span class="token punctuation">(</span><span class="token class-name">DateTime</span> now<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _now <span class="token operator">=</span> now<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Lamar<span class="token punctuation">.</span>Testing<span class="token punctuation">.</span>Samples<span class="token punctuation">.</span>NowSpeaker<span class="token punctuation">.</span><span class="token function">Speak</span><span class="token punctuation">(</span>_now<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,9),o=[p];function c(l,i,u,k,r,d){return s(),a("div",null,o)}var f=n(e,[["render",c]]);export{h as __pageData,f as default};
