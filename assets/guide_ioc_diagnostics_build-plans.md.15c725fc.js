import{_ as n,c as s,o as a,a as t}from"./app.35d600bb.js";const m='{"title":"Build Plans","description":"","frontmatter":{},"headers":[{"level":2,"title":"HowDoIBuild()","slug":"howdoibuild"},{"level":2,"title":"Querying for Specific Build Plans","slug":"querying-for-specific-build-plans"}],"relativePath":"guide/ioc/diagnostics/build-plans.md","lastUpdated":1644423598335}',p={},o=t(`<h1 id="build-plans" tabindex="-1">Build Plans <a class="header-anchor" href="#build-plans" aria-hidden="true">#</a></h1><p>As part of the diagnostics, you can preview the generated code that Lamar has used to resolve a service to completely understand how that object and all of its dependencies are built out.</p><h2 id="howdoibuild" tabindex="-1">HowDoIBuild() <a class="header-anchor" href="#howdoibuild" aria-hidden="true">#</a></h2><p>New for Lamar 3.1.0 is a convenience method similar to <code>WhatDoIHave()</code> that prints out the build plans:</p><p><a id="snippet-sample_using-howdoibuild"></a></p><div class="language-cs"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEngine<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Hemi<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;The Hemi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEngine<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>VEight<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;V8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEngine<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FourFiftyFour<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEngine<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>StraightSix<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scoped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEngine<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rotary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&quot;Rotary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEngine<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PluginElectric<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEngine<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">InlineFour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEngine<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseIfNone</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>VTwelve<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">HowDoIBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Diagnostics/HowDoIBuild_smoke_tests.cs#L30-L48" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-howdoibuild" title="Start of snippet">anchor</a></sup></p><p>This method also provides the same kind of filtering as the <a href="/guide/ioc/diagnostics/what-do-i-have.html">WhatDoIHave</a> operation.</p><h2 id="querying-for-specific-build-plans" tabindex="-1">Querying for Specific Build Plans <a class="header-anchor" href="#querying-for-specific-build-plans" aria-hidden="true">#</a></h2><p>Let&#39;s say you have a container configured like this:</p><p><a id="snippet-sample_container-for-build-plan"></a></p><div class="language-cs"><pre><code>container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    x<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IService<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Service<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IService<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Service2<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AWidget<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rule<span class="token punctuation">,</span> DefaultRule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rule<span class="token punctuation">,</span> ARule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ColorRule</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IThing<span class="token punctuation">,</span> Thing<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    

    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEngine<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PushrodEngine<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startable1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startable1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startable2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startable2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startable3<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startable3<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/container_model_usage.cs#L24-L45" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_container-for-build-plan" title="Start of snippet">anchor</a></sup></p><p>And you have a concrete type like this one:</p><p><a id="snippet-sample_usesstuff"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsesStuff</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IWidget</span> Widget <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IThing</span> Thing <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IEngine</span> Engine <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">UsesStuff</span><span class="token punctuation">(</span><span class="token class-name">IWidget</span> widget<span class="token punctuation">,</span> <span class="token class-name">IThing</span> thing<span class="token punctuation">,</span> <span class="token class-name">IEngine</span> engine<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Widget <span class="token operator">=</span> widget<span class="token punctuation">;</span>
        Thing <span class="token operator">=</span> thing<span class="token punctuation">;</span>
        Engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/container_model_usage.cs#L48-L62" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_usesstuff" title="Start of snippet">anchor</a></sup></p><p>To see what the generated code is to resolve that <code>UsesStuff</code> type, we can use the <a href="/guide/ioc/diagnostics/using-the-container-model.html">container diagnostic model</a> to access that code for us with this syntax:</p><p><a id="snippet-sample_getting-build-plan"></a></p><div class="language-cs"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> plan <span class="token operator">=</span> container<span class="token punctuation">.</span>Model<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UsesStuff<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">DescribeBuildPlan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/container_model_usage.cs#L67-L69" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_getting-build-plan" title="Start of snippet">anchor</a></sup></p><p>Which outputs this lovely looking code below:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lamar_Testing_IoC_Acceptance_container_model_usage_UsesStuff_usesStuff</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Lamar<span class="token punctuation">.</span>IoC<span class="token punctuation">.</span>Resolvers<span class="token punctuation">.</span>TransientResolver<span class="token punctuation">&lt;</span>Lamar<span class="token punctuation">.</span>Testing<span class="token punctuation">.</span>IoC<span class="token punctuation">.</span>Acceptance<span class="token punctuation">.</span>container_model_usage<span class="token punctuation">.</span>UsesStuff<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IWidget</span> _widget<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Lamar_Testing_IoC_Acceptance_container_model_usage_UsesStuff_usesStuff</span><span class="token punctuation">(</span><span class="token class-name">IWidget</span> widget<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _widget <span class="token operator">=</span> widget<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Lamar<span class="token punctuation">.</span>Testing<span class="token punctuation">.</span>IoC<span class="token punctuation">.</span>Acceptance<span class="token punctuation">.</span>container_model_usage<span class="token punctuation">.</span>UsesStuff</span> <span class="token function">Build</span><span class="token punctuation">(</span><span class="token class-name">Lamar<span class="token punctuation">.</span>IoC<span class="token punctuation">.</span>Scope</span> scope<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> pushrodEngine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Lamar<span class="token punctuation">.</span>Testing<span class="token punctuation">.</span>IoC<span class="token punctuation">.</span>Acceptance<span class="token punctuation">.</span>container_model_usage<span class="token punctuation">.</span>PushrodEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> thing <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Lamar<span class="token punctuation">.</span>Testing<span class="token punctuation">.</span>IoC<span class="token punctuation">.</span>Acceptance<span class="token punctuation">.</span>IThing<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;thing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Lamar<span class="token punctuation">.</span>Testing<span class="token punctuation">.</span>IoC<span class="token punctuation">.</span>Acceptance<span class="token punctuation">.</span>container_model_usage<span class="token punctuation">.</span>UsesStuff</span><span class="token punctuation">(</span>_widget<span class="token punctuation">,</span> thing<span class="token punctuation">,</span> pushrodEngine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><p>Some notes on this:</p><ul><li>You&#39;ll see that dependencies marked as <code>Transient</code> are just built inline (<code>PushrodEngine</code>)</li><li>Dependencies marked as <code>Singleton</code> end up being constructor dependencies to the resolver class and effectively inlined. That&#39;s a pretty significant performance that most modern IoC tools make in some form or fashion</li><li><code>Scoped</code> dependencies -- for the moment -- are accessed by using service location to get the scoping right and honestly just to simplify the code generation process</li></ul>`,25),e=[o];function c(u,l,i,k,r,d){return a(),s("div",null,e)}var h=n(p,[["render",c]]);export{m as __pageData,h as default};
