import{_ as e,c as a,o as r,a as o}from"./app.35d600bb.js";const u='{"title":"LamarCodeGeneration & LamarCompiler","description":"","frontmatter":{},"relativePath":"guide/compilation/index.md","lastUpdated":1644423598327}',t={},i=o('<h1 id="lamarcodegeneration-lamarcompiler" tabindex="-1">LamarCodeGeneration &amp; LamarCompiler <a class="header-anchor" href="#lamarcodegeneration-lamarcompiler" aria-hidden="true">#</a></h1><p>Underneath Lamar the IoC container is a standalone library named <code>LamarCodeGeneration</code> that can be used by itself as a code generation and Lambda compilation tool. As of Lamar v3.0, there&#39;s also a separate library called <code>LamarCompiler</code> that is a tiny helper to do in memory compilation of C# via Roslyn. The <a href="https://jasperfx.github.io" target="_blank" rel="noopener noreferrer">Jasper application framework</a> heavily uses this capability as its <a href="https://jeremydmiller.com/2018/01/16/introducing-bluemilk-structuremaps-replacement-jaspers-special-sauce/" target="_blank" rel="noopener noreferrer">&quot;Special Sauce&quot;</a> (Lamar was originally built under the project name &quot;BlueMilk&quot;). See also <a href="https://jeremydmiller.com/2018/05/16/roslyn-powered-code-weaving-middleware/" target="_blank" rel="noopener noreferrer">Roslyn Powered Code Weaving Middleware</a> for more information about how Jasper uses Lamar for its efficient middleware strategy.</p>',2),n=[i];function l(s,d,c,m,p,_){return r(),a("div",null,n)}var f=e(t,[["render",l]]);export{u as __pageData,f as default};
