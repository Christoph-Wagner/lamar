import{_ as n,c as s,o as a,a as t}from"./app.35d600bb.js";const h='{"title":"Lamar and IDisposable/IAsyncDisposable","description":"","frontmatter":{},"headers":[{"level":2,"title":"IAsyncDisposable","slug":"iasyncdisposable"},{"level":2,"title":"Singletons","slug":"singletons"},{"level":2,"title":"Nested Containers","slug":"nested-containers"},{"level":2,"title":"Transients","slug":"transients"}],"relativePath":"guide/ioc/disposing.md","lastUpdated":1644423598331}',e={},p=t(`<h1 id="lamar-and-idisposable-iasyncdisposable" tabindex="-1">Lamar and IDisposable/IAsyncDisposable <a class="header-anchor" href="#lamar-and-idisposable-iasyncdisposable" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Lamar v7.0 added support for <code>IAsyncDisposable</code> handling. Finally.</p></div><p>One of the main reasons to use an IoC container is to offload the work of disposing created objects at the right time in the application scope. Sure, it&#39;s something you should be aware of, but developers are less likely to make mistakes if that&#39;s just handled for them. To simplify the usage of <code>IDisposable</code> and <code>IAsyncDisposable</code>. In summary, Lamar tracks all objects it creates <strong>in the container that created the object</strong> that implements either <code>IDisposable</code> <strong>or</strong> <code>IAsyncDisposable</code>, and these tracked objects are disposed when the creating container is disposed.</p><h2 id="iasyncdisposable" tabindex="-1">IAsyncDisposable <a class="header-anchor" href="#iasyncdisposable" aria-hidden="true">#</a></h2><p>The Lamar <code>IContainer</code> itself, and all nested containers (scoped containers in .Net DI nomenclature) implement both <code>IDisposable</code> and <code>IAsyncDisposable</code>. It is <strong>not</strong> necessary to call both <code>Dispose()</code> and <code>DisposeAsync()</code> as either method will dispose all tracked <code>IDisposable</code> / <code>IAsyncDisposable</code> objects when either method is called.</p><p><a id="snippet-sample_calling_async_disposable"></a></p><div class="language-cs"><pre><code><span class="token comment">// Asynchronously disposing the container</span>
<span class="token keyword">await</span> container<span class="token punctuation">.</span><span class="token function">DisposeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/disposing_container.cs#L472-L476" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_calling_async_disposable" title="Start of snippet">anchor</a></sup></p><p>The following table explains what method is called on a tracked object when the creating container is disposed:</p><table><thead><tr><th>If an object implements...</th><th>Container.Dispose()</th><th>Container.DisposeAsync()</th></tr></thead><tbody><tr><td><code>IDisposable</code></td><td><code>Dispose()</code></td><td><code>Dispose()</code></td></tr><tr><td><code>IAsyncDisposable</code></td><td><code>DisposeAsync().GetAwaiter().GetResult()</code></td><td><code>DisposeAsync()</code></td></tr><tr><td><code>IDisposable</code> and <code>IAsyncDisposable</code></td><td><code>DisposeAsync()</code></td><td><code>DisposeAsync()</code></td></tr></tbody></table><p>If any objects are being created by Lamar that only implement <code>IAsyncDisposable</code>, it is probably best to strictly use <code>Container.DisposeAsync()</code> to avoid any problematic mixing of sync and async code.</p><h2 id="singletons" tabindex="-1">Singletons <a class="header-anchor" href="#singletons" aria-hidden="true">#</a></h2><p>This one is easy, any object marked as the <em>Singleton</em> lifecycle that implements <code>IDisposable</code> is disposed when the root container is disposed:</p><p><a id="snippet-sample_singleton-in-action"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">singletons_are_disposed_when_the_container_is_disposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ForSingletonOf</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DisposableSingleton<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// As a singleton-scoped object, every request for DisposableSingleton</span>
    <span class="token comment">// will return the same object</span>
    <span class="token class-name"><span class="token keyword">var</span></span> singleton <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DisposableSingleton<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    singleton<span class="token punctuation">.</span><span class="token function">ShouldBeSameAs</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DisposableSingleton<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    singleton<span class="token punctuation">.</span><span class="token function">ShouldBeSameAs</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DisposableSingleton<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    singleton<span class="token punctuation">.</span><span class="token function">ShouldBeSameAs</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DisposableSingleton<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    singleton<span class="token punctuation">.</span><span class="token function">ShouldBeSameAs</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DisposableSingleton<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    singleton<span class="token punctuation">.</span>WasDisposed<span class="token punctuation">.</span><span class="token function">ShouldBeFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// now, dispose the Container</span>
    container<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// the SingletonThing scoped object should be disposed</span>
    singleton<span class="token punctuation">.</span>WasDisposed<span class="token punctuation">.</span><span class="token function">ShouldBeTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/lifecycle_creation.cs#L22-L48" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_singleton-in-action" title="Start of snippet">anchor</a></sup></p><h2 id="nested-containers" tabindex="-1">Nested Containers <a class="header-anchor" href="#nested-containers" aria-hidden="true">#</a></h2><p>As discussed in <a href="/guide/ioc/nested-containers.html">nested containers</a>, any transient or container-scoped object that implements <code>IDisposable</code> and is created by a nested container will be disposed as the nested container is disposed:</p><p><a id="snippet-sample_nested-disposal"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">nested_container_disposal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// A SingletonThing scoped service</span>
        _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ForSingletonOf</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IColorCache<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ColorCache<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// A transient scoped service</span>
        _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IColor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Green<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        
        
        <span class="token comment">// An AlwaysUnique scoped service</span>
        _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Purple<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Blue<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ColorCache</span> singleton <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Green</span> nestedGreen <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Blue</span> nestedBlue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Purple</span> nestedPurple <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> nested <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">GetNestedContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// SingletonThing&#39;s are really built by the parent</span>
        singleton <span class="token operator">=</span> nested<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IColorCache<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ColorCache<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        nestedGreen <span class="token operator">=</span> nested<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IColor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Green<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        nestedBlue <span class="token operator">=</span> nested<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Blue<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        nestedPurple <span class="token operator">=</span> nested<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Purple<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Transients created by the Nested Container</span>
    <span class="token comment">// are disposed</span>
    nestedGreen<span class="token punctuation">.</span>WasDisposed<span class="token punctuation">.</span><span class="token function">ShouldBeTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nestedBlue<span class="token punctuation">.</span>WasDisposed<span class="token punctuation">.</span><span class="token function">ShouldBeTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Unique&#39;s created by the Nested Container</span>
    <span class="token comment">// are disposed</span>
    nestedPurple<span class="token punctuation">.</span>WasDisposed<span class="token punctuation">.</span><span class="token function">ShouldBeTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// NOT disposed because it&#39;s owned by</span>
    <span class="token comment">// the parent container</span>
    singleton<span class="token punctuation">.</span>WasDisposed<span class="token punctuation">.</span><span class="token function">ShouldBeFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/nested_container.cs#L100-L153" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_nested-disposal" title="Start of snippet">anchor</a></sup><a id="snippet-sample_nested-disposal-1"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">nested_container_disposal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// A SingletonThing scoped service</span>
        _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ForSingletonOf</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IColorCache<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ColorCache<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// A transient scoped service</span>
        _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IColor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Use</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Green<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// An AlwaysUnique scoped service</span>
        _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Purple<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AlwaysUnique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ColorCache</span> singleton <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Green</span> nestedGreen <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Blue</span> nestedBlue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Purple</span> nestedPurple <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> nested <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">GetNestedContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// SingletonThing&#39;s are really built by the parent</span>
        singleton <span class="token operator">=</span> nested<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IColorCache<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ColorCache<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        nestedGreen <span class="token operator">=</span> nested<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IColor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ShouldBeOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Green<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        nestedBlue <span class="token operator">=</span> nested<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Blue<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        nestedPurple <span class="token operator">=</span> nested<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Purple<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Transients created by the Nested Container</span>
    <span class="token comment">// are disposed</span>
    nestedGreen<span class="token punctuation">.</span>WasDisposed<span class="token punctuation">.</span><span class="token function">ShouldBeTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nestedBlue<span class="token punctuation">.</span>WasDisposed<span class="token punctuation">.</span><span class="token function">ShouldBeTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Unique&#39;s created by the Nested Container</span>
    <span class="token comment">// are disposed</span>
    nestedPurple<span class="token punctuation">.</span>WasDisposed<span class="token punctuation">.</span><span class="token function">ShouldBeTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// NOT disposed because it&#39;s owned by</span>
    <span class="token comment">// the parent container</span>
    singleton<span class="token punctuation">.</span>WasDisposed<span class="token punctuation">.</span><span class="token function">ShouldBeFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/nested_containers.cs#L121-L170" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_nested-disposal-1" title="Start of snippet">anchor</a></sup></p><h2 id="transients" tabindex="-1">Transients <a class="header-anchor" href="#transients" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This behavior is different from StructureMap. Be aware of this, or you may be vulnerable to memory leaks.</p></div><p>Objects that implement <code>IDisposable</code> are tracked by the container that creates them and will be disposed whenever that container itself is disposed.</p>`,26),o=[p];function c(l,i,u,k,r,d){return a(),s("div",null,o)}var g=n(e,[["render",c]]);export{h as __pageData,g as default};
