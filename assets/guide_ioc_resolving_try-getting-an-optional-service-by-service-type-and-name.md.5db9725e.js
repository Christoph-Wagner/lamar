import{_ as n,c as a,o as s,a as t}from"./app.35d600bb.js";const _='{"title":"Try Getting an Optional Service by Service Type and Name","description":"","frontmatter":{},"relativePath":"guide/ioc/resolving/try-getting-an-optional-service-by-service-type-and-name.md","lastUpdated":1644423598339}',e={},p=t(`<h1 id="try-getting-an-optional-service-by-service-type-and-name" tabindex="-1">Try Getting an Optional Service by Service Type and Name <a class="header-anchor" href="#try-getting-an-optional-service-by-service-type-and-name" aria-hidden="true">#</a></h1><p>Just use the <code>IContainer.TryGetInstance&lt;T&gt;(name)</code> or <code>IContainer.TryGetInstance(Type pluginType, string name)</code> method as shown below:</p><p><a id="snippet-sample_trygetinstancevianameandgeneric_returnsinstance_whentypefound"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TryGetInstanceViaNameAndGeneric_ReturnsInstance_WhenTypeFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">addColorInstance</span><span class="token punctuation">(</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addColorInstance</span><span class="token punctuation">(</span><span class="token string">&quot;Orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addColorInstance</span><span class="token punctuation">(</span><span class="token string">&quot;Blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// &quot;Orange&quot; exists, so an object should be returned</span>
    <span class="token class-name"><span class="token keyword">var</span></span> instance <span class="token operator">=</span> _container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryGetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    instance<span class="token punctuation">.</span><span class="token function">ShouldBeOfType</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ColorRule</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Graph/ContainerTester.cs#L268-L281" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_trygetinstancevianameandgeneric_returnsinstance_whentypefound" title="Start of snippet">anchor</a></sup></p>`,5),o=[p];function c(i,r,u,l,d,k){return s(),a("div",null,o)}var g=n(e,[["render",c]]);export{_ as __pageData,g as default};
