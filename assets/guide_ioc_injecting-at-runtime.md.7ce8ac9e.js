import{_ as n,c as s,o as a,a as t}from"./app.35d600bb.js";const h='{"title":"Injecting Services at Runtime","description":"","frontmatter":{},"relativePath":"guide/ioc/injecting-at-runtime.md","lastUpdated":1644423598327}',e={},p=t(`<h1 id="injecting-services-at-runtime" tabindex="-1">Injecting Services at Runtime <a class="header-anchor" href="#injecting-services-at-runtime" aria-hidden="true">#</a></h1><p>Lamar&#39;s predecessor <a href="https://structuremap.github.io" target="_blank" rel="noopener noreferrer">StructureMap</a> allowed you to override service registrations in nested containers in a general way. Some .Net application frameworks depend on this functionality to inject some kind of contextual service into a nested container. <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core&#39;s <code>HttpContext</code> is an example. MassTransit&#39;s <a href="https://github.com/MassTransit/MassTransit/blob/develop/src/MassTransit/ConsumeContext.cs" target="_blank" rel="noopener noreferrer">ConsumeContext</a> is another.</p><p>Using that as an example, let&#39;s say that our application framework has this context type that the framework creates and wants to inject directly into nested containers for some kind of operation:</p><p><a id="snippet-sample_executioncontext"></a></p><div class="language-cs"><pre><code><span class="token comment">// This class is specific to some kind of short lived </span>
<span class="token comment">// process and lives in a nested container</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutionContext</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/inject_to_scope.cs#L191-L198" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_executioncontext" title="Start of snippet">anchor</a></sup></p><p>We might well have a service in our code that is resolved from a Lamar container that depends on that <code>ExecutionContext</code> interface:</p><p><a id="snippet-sample_contextusingservice"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextUsingService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ExecutionContext</span> Context <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">ContextUsingService</span><span class="token punctuation">(</span><span class="token class-name">ExecutionContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Context <span class="token operator">=</span> context<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/inject_to_scope.cs#L179-L189" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_contextusingservice" title="Start of snippet">anchor</a></sup></p><p>The first thing we have to do is make a registration in Lamar <strong>upfront</strong> that lets the container know that <code>ExecutionContext</code> is going to be injected at runtime:</p><p><a id="snippet-sample_container-with-injectable"></a></p><div class="language-cs"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Container</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    _<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Injectable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ExecutionContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/inject_to_scope.cs#L155-L160" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_container-with-injectable" title="Start of snippet">anchor</a></sup></p><p>At runtime, we can inject <code>ExecutionContext</code> like this:</p><p><a id="snippet-sample_injecting-context-to-nested"></a></p><div class="language-cs"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExecutionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> nested <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">GetNestedContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
nested<span class="token punctuation">.</span><span class="token function">Inject</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/inject_to_scope.cs#L162-L167" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_injecting-context-to-nested" title="Start of snippet">anchor</a></sup></p><p>Finally, when we resolve a service that depends on <code>ExecutionContext</code> from the nested container we built above, we can see that it has a reference to our context object:</p><p><a id="snippet-sample_resolving-using-context"></a></p><div class="language-cs"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> service <span class="token operator">=</span> nested<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ContextUsingService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
service<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">ShouldBeSameAs</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/inject_to_scope.cs#L170-L173" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_resolving-using-context" title="Start of snippet">anchor</a></sup></p>`,22),o=[p];function c(i,r,l,u,k,d){return a(),s("div",null,o)}var g=n(e,[["render",c]]);export{h as __pageData,g as default};
