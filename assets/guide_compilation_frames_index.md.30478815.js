import{_ as n,c as a,o as s,a as e}from"./app.35d600bb.js";var t="/lamar/assets/LamarCodeGenClassDiagram.d1472101.png",p="/lamar/assets/GeneratedAssemblyModel.5c66e4ae.png";const y='{"title":"The \\"Frame\\" Model","description":"","frontmatter":{},"headers":[{"level":2,"title":"GeneratedAssembly/Type/Method","slug":"generatedassembly-type-method"}],"relativePath":"guide/compilation/frames/index.md","lastUpdated":1644423598327}',o={},c=e('<h1 id="the-frame-model" tabindex="-1">The &quot;Frame&quot; Model <a class="header-anchor" href="#the-frame-model" aria-hidden="true">#</a></h1><p>The purpose of the &quot;frames&quot; model is to be able to generate dynamic methods by declaring a list of logical operations in generated code via Frame\xA0objects, then let Lamar handle:</p><ul><li>Finding any missing dependencies of those frames</li><li>Determine what the necessary variable inputs are</li><li>Ordering all the frames based on dependency order just prior to generating the code</li></ul><p>Before diving into an example, here&#39;s a little class diagram of the main types:</p><p><img src="'+t+`" alt="The Code Generation Model"></p><p>The various types represent:</p><ul><li><code>Frame</code>\xA0- Named after the StackFrame objects within stack traces in .NET. Models a logical action done in the generated code. Concrete examples in Lamar or Jasper would be calling a method on an object, calling a constructor function, or specific frame objects to create wrapped transaction boundaries or exception handling boundaries.</li><li><code>Variable</code>\xA0- pretty well what it sounds like. This type models a variable within the generated method, but also includes information about what Frame\xA0created it to help order the dependencies</li><li><code>IVariableSource</code>\xA0- mechanism to &quot;find&quot; or create variables. Examples in Lamar include resolving a service from an IoC container, passing along a method argument, or the example below that tells you the current time</li><li><code>IMethodVariables</code>\xA0- interface that is used by Frame\xA0classes to go find their necessary Variable\xA0dependencies.</li></ul><p>Alright then, let&#39;s make this concrete. Let&#39;s say that we want to generate and use dynamic instances of this interface:</p><p><a id="snippet-sample_isaysomething"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISaySomething</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/LamarCompiler.Testing/Samples/Frames.cs#L67-L72" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_isaysomething" title="Start of snippet">anchor</a></sup></p><p>Moreover, I want a version of <code>ISaySomething</code>\xA0that will call the following method and write the current time to the console:</p><p><a id="snippet-sample_nowspeaker"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NowSpeaker</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token class-name">DateTime</span> now<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/LamarCompiler.Testing/Samples/Frames.cs#L57-L65" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_nowspeaker" title="Start of snippet">anchor</a></sup></p><p>Our dynamic class for ISaySomething\xA0will need to pass the current time to the now\xA0parameter of that method. To help out here, there&#39;s some built in helpers in Lamar specifically to write in the right code to get the current time to a variable of DateTime\xA0or DateTimeOffset\xA0that is named &quot;now.&quot;</p><p>To skip ahead a little bit, let&#39;s generate a new class and object with the following code:</p><p><a id="snippet-sample_write-new-method"></a></p><div class="language-cs"><pre><code><span class="token comment">// Configures the code generation rules</span>
<span class="token comment">// and policies</span>
<span class="token class-name"><span class="token keyword">var</span></span> rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GenerationRules</span><span class="token punctuation">(</span><span class="token string">&quot;GeneratedNamespace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Adds the &quot;now : DateTime&quot; variable rule to </span>
<span class="token comment">// our generated code</span>
rules<span class="token punctuation">.</span>Sources<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">NowTimeVariableSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Start the definition for a new generated assembly</span>
<span class="token class-name"><span class="token keyword">var</span></span> assembly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GeneratedAssembly</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add a new generated type called &quot;WhatTimeIsIt&quot; that will</span>
<span class="token comment">// implement the </span>
<span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">AddType</span><span class="token punctuation">(</span><span class="token string">&quot;WhatTimeIsIt&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ISaySomething</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Getting the definition for the method named &quot;Speak&quot;</span>
<span class="token class-name"><span class="token keyword">var</span></span> method <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">MethodFor</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>ISaySomething<span class="token punctuation">.</span>Speak<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Adding a frame that calls the NowSpeaker.Speak() method and</span>
<span class="token comment">// adding it to the generated method</span>
<span class="token class-name"><span class="token keyword">var</span></span> @call <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MethodCall</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">NowSpeaker</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>NowSpeaker<span class="token punctuation">.</span>Speak<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
method<span class="token punctuation">.</span>Frames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>@call<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Compile the new code!</span>
assembly<span class="token punctuation">.</span><span class="token function">CompileAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/LamarCompiler.Testing/Samples/Frames.cs#L23-L49" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_write-new-method" title="Start of snippet">anchor</a></sup></p><p>After all that, if we interrogate the source code for the generated type above (type.SourceCode), we&#39;d see this ugly generated code:</p><div class="language-csharp"><pre><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhatTimeIsIt</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Lamar<span class="token punctuation">.</span>Testing<span class="token punctuation">.</span>Samples<span class="token punctuation">.</span>ISaySomething</span></span>
    <span class="token punctuation">{</span>


        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> now <span class="token operator">=</span> System<span class="token punctuation">.</span>DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>
            Lamar<span class="token punctuation">.</span>Testing<span class="token punctuation">.</span>Samples<span class="token punctuation">.</span>NowSpeaker<span class="token punctuation">.</span><span class="token function">Speak</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre></div><p>Some notes about the generated code:</p><ul><li>Lamar was able to stick in some additional code to pass the current time into a new variable, and call the Speak(DateTime now)\xA0method with that value.</li><li>Lamar is smart enough to put that code before the call to the method (that kind of matters here)</li><li>The generated code uses full type names in almost all cases to avoid type collisions rather than trying to get smart with using\xA0statements in the generated code</li></ul><p>So now let&#39;s look at how Lamar was able to add the code to pass along DateTime.UtcNow. First off, let&#39;s look at the code that just writes out the date variable:</p><p><a id="snippet-sample_nowfetchframe"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NowFetchFrame</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SyncFrame</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">NowFetchFrame</span><span class="token punctuation">(</span><span class="token class-name">Type</span> variableType<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Notice how &quot;this&quot; frame is passed into the variable</span>
        <span class="token comment">// class constructor as the creator</span>
        Variable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Variable</span><span class="token punctuation">(</span>variableType<span class="token punctuation">,</span> <span class="token string">&quot;now&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name">Variable</span> Variable <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GenerateCode</span><span class="token punctuation">(</span><span class="token class-name">GeneratedMethod</span> method<span class="token punctuation">,</span> <span class="token class-name">ISourceWriter</span> writer<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        writer<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;var </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Variable<span class="token punctuation">.</span>Usage</span><span class="token punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Variable<span class="token punctuation">.</span>VariableType<span class="token punctuation">.</span>FullName</span><span class="token punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Next<span class="token punctuation">?.</span><span class="token function">GenerateCode</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/LamarCodeGeneration/Model/NowTimeVariableSource.cs#L31-L49" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_nowfetchframe" title="Start of snippet">anchor</a></sup></p><p>In the frame above, you&#39;ll see that the <code>GenerateCode()</code>\xA0method writes its code into the source, then immediately turns around and tells the next Frame\xA0- if there is one - to generated its code. As the last step to write out the new source code, Lamar:</p><ol><li>Goes through an effort to find any missing frames and variables</li><li>Sorts them with a topological sort (what frames depend on what other frames or variables, what variables are used or created by what frames)</li><li>Organizes the frames into a single linked list</li><li>Calls <code>GenerateCode()</code>\xA0on the first frame</li></ol><p>In the generated method up above, the call to <code>NowSpeaker.Speak(now)</code>\xA0depends on the now\xA0variable which is in turn created by the <code>NowFetchFrame</code>, and that&#39;s enough information for Lamar to order things and generate the final code.</p><p>Lastly, we had to use a custom <code>IVariableSource</code>\xA0to teach Lamar how to resolve the now\xA0variable. That code looks like this:</p><p><a id="snippet-sample_nowtimevariablesource"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NowTimeVariableSource</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVariableSource</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Matches</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> type <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DateTime</span><span class="token punctuation">)</span> <span class="token operator">||</span> type <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DateTimeOffset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Variable</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DateTime</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NowFetchFrame</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DateTime</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Variable<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DateTimeOffset</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NowFetchFrame</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DateTimeOffset</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Variable<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentOutOfRangeException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Only DateTime and DateTimeOffset are supported&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/LamarCodeGeneration/Model/NowTimeVariableSource.cs#L6-L29" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_nowtimevariablesource" title="Start of snippet">anchor</a></sup></p><p>Out of the box, the Lamar + <a href="https://jasperfx.github.io" target="_blank" rel="noopener noreferrer">Jasper</a> combination uses variable sources for:</p><ul><li>Services from the internal IoC container of the application</li><li>Method arguments</li><li>Variables that can be derived from a method argument like <code>HttpContext.Request : HttpRequest</code></li><li>The &quot;now&quot; convention shown here</li></ul><h2 id="generatedassembly-type-method" tabindex="-1">GeneratedAssembly/Type/Method <a class="header-anchor" href="#generatedassembly-type-method" aria-hidden="true">#</a></h2><p>Getting a little deeper into the parts of the &quot;frames&quot; model, see this class diagram:</p><p><img src="`+p+'" alt="GeneratedAssembly Model"></p>',40),l=[c];function i(r,u,k,d,m,h){return s(),a("div",null,l)}var f=n(o,[["render",i]]);export{y as __pageData,f as default};
